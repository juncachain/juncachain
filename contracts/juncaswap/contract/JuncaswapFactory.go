// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/juncachain/juncachain"
	"github.com/juncachain/juncachain/accounts/abi"
	"github.com/juncachain/juncachain/accounts/abi/bind"
	"github.com/juncachain/juncachain/common"
	"github.com/juncachain/juncachain/core/types"
	"github.com/juncachain/juncachain/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// JuncaswapFactoryMetaData contains all meta data concerning the JuncaswapFactory contract.
var JuncaswapFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_nogas\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPerTx\",\"type\":\"uint256\"}],\"name\":\"setGasPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526611c37937e0800060025534801561001b57600080fd5b506040516133003803806133008339818101604052602081101561003e57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556132928061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635d96feb1116100715780635d96feb11461011957806382dfdce41461013857806383dd41c614610170578063a2e74af614610178578063e6a439051461019e578063f46901ed146101cc576100a9565b8063017e7e58146100ae578063094b7415146100d25780631e3dd18b146100da5780633fe43f40146100f7578063574f2ba314610111575b600080fd5b6100b66101f2565b604080516001600160a01b039092168252519081900360200190f35b6100b6610201565b6100b6600480360360208110156100f057600080fd5b5035610210565b6100ff610237565b60408051918252519081900360200190f35b6100ff61023d565b6101366004803603602081101561012f57600080fd5b5035610243565b005b6100b66004803603606081101561014e57600080fd5b506001600160a01b0381358116916020810135909116906040013515156102a0565b6100ff6105f1565b6101366004803603602081101561018e57600080fd5b50356001600160a01b0316610623565b6100b6600480360360408110156101b457600080fd5b506001600160a01b038135811691602001351661069d565b610136600480360360208110156101e257600080fd5b50356001600160a01b03166106c3565b6000546001600160a01b031681565b6001546001600160a01b031681565b6004818154811061021d57fe5b6000918252602090912001546001600160a01b0316905081565b60025481565b60045490565b6001546001600160a01b0316331461029b576040805162461bcd60e51b8152602060048201526016602482015275253ab731b0b9bbb0b82b191d102327a92124a22222a760511b604482015290519081900360640190fd5b600255565b6000826001600160a01b0316846001600160a01b03161415610309576040805162461bcd60e51b815260206004820181905260248201527f4a756e63617377617056323a204944454e544943414c5f414444524553534553604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b03161061032c57848661032f565b85855b90925090506001600160a01b03821661038f576040805162461bcd60e51b815260206004820152601960248201527f4a756e63617377617056323a205a45524f5f4144445245535300000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260036020908152604080832085851684529091529020541615610409576040805162461bcd60e51b815260206004820152601860248201527f4a756e63617377617056323a20504149525f4558495354530000000000000000604482015290519081900360640190fd5b60606040518060200161041b9061073d565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f560408051633fb3e5cd60e21b81526001600160a01b0387811660048301528681166024830152336044830152891515606483015291519297509087169163fecf97349160848082019260009290919082900301818387803b1580156104fc57600080fd5b505af1158015610510573d6000803e3d6000fd5b5050506001600160a01b0380861660008181526003602081815260408084208a87168086529083528185208054978e166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201528a151581830152905192935090917f30fcf386678f0a00ca73486610fda45a0bd09cb9ede7e2e5078f4c842f21b1da9181900360600190a3505050509392505050565b6000604051806020016106039061073d565b6020820181038252601f19601f8201166040525080519060200120905090565b6001546001600160a01b0316331461067b576040805162461bcd60e51b8152602060048201526016602482015275253ab731b0b9bbb0b82b191d102327a92124a22222a760511b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461071b576040805162461bcd60e51b8152602060048201526016602482015275253ab731b0b9bbb0b82b191d102327a92124a22222a760511b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612b138061074b8339019056fe60806040526001600c55670de0b6b3a7640000600e5534801561002157600080fd5b506040514690806052612ac18239604080519182900360520182208282018252600c83526b253ab731b0b9bbb0b8102b1960a11b6020938401528151808301835260018152603160f81b908401528151808401919091527feecf05eb8ed3c33d442b7cf135c42f0b74c3af5f160d3b623a6bbd721fdf7574818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b031916331790556129ae806101136000396000f3fe6080604052600436106102045760003560e01c80636a62784211610118578063bc25cf77116100a0578063dd62ed3e1161006f578063dd62ed3e14610766578063df49804a146107a1578063f96cab27146107b6578063fecf9734146107e6578063fff6cae91461083157610204565b8063bc25cf77146106ab578063c45a0155146106de578063d21220a7146106f3578063d505accf1461070857610204565b806389afcb44116100e757806389afcb44146105e75780638a0309441461063357806395d89b4114610648578063a9059cbb1461065d578063ba9a7a561461069657610204565b80636a6278421461053957806370a082311461056c5780637464fc3d1461059f5780637ecebe00146105b457610204565b80632ddb301b1161019b5780633619c6691161016a5780633619c669146104d05780633644e515146104e55780633fe43f40146104fa5780635909c0d51461050f5780635a3d54931461052457610204565b80632ddb301b146103da57806330adf81f146103ef57806330e8d2c614610404578063313ce567146104a557610204565b806318160ddd116101d757806318160ddd1461035b5780631d1438481461038257806323b872dd14610397578063264adff81461020457610204565b806306fdde031461020e5780630902f1ac14610298578063095ea7b3146102dd5780630dfe16811461032a575b61020c610846565b005b34801561021a57600080fd5b506102236108c0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025d578181015183820152602001610245565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a457600080fd5b506102ad6108e8565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b3480156102e957600080fd5b506103166004803603604081101561030057600080fd5b506001600160a01b038135169060200135610912565b604080519115158252519081900360200190f35b34801561033657600080fd5b5061033f610929565b604080516001600160a01b039092168252519081900360200190f35b34801561036757600080fd5b50610370610938565b60408051918252519081900360200190f35b34801561038e57600080fd5b5061033f61093e565b3480156103a357600080fd5b50610316600480360360608110156103ba57600080fd5b506001600160a01b03813581169160208101359091169060400135610952565b3480156103e657600080fd5b506103706109ec565b3480156103fb57600080fd5b506103706109f1565b34801561041057600080fd5b5061020c600480360360a081101561042757600080fd5b6001600160a01b038235811692602081013592604082013592606083013516919081019060a08101608082013564010000000081111561046657600080fd5b82018360208201111561047857600080fd5b8035906020019184600183028401116401000000008311171561049a57600080fd5b509092509050610a15565b3480156104b157600080fd5b506104ba61114a565b6040805160ff9092168252519081900360200190f35b3480156104dc57600080fd5b5061037061114f565b3480156104f157600080fd5b50610370611155565b34801561050657600080fd5b5061037061115b565b34801561051b57600080fd5b506103706111f0565b34801561053057600080fd5b506103706111f6565b34801561054557600080fd5b506103706004803603602081101561055c57600080fd5b50356001600160a01b03166111fc565b34801561057857600080fd5b506103706004803603602081101561058f57600080fd5b50356001600160a01b03166114fe565b3480156105ab57600080fd5b50610370611510565b3480156105c057600080fd5b50610370600480360360208110156105d757600080fd5b50356001600160a01b0316611516565b3480156105f357600080fd5b5061061a6004803603602081101561060a57600080fd5b50356001600160a01b0316611528565b6040805192835260208301919091528051918290030190f35b34801561063f57600080fd5b506103166118d0565b34801561065457600080fd5b506102236118d9565b34801561066957600080fd5b506103166004803603604081101561068057600080fd5b506001600160a01b0381351690602001356118fa565b3480156106a257600080fd5b50610370611907565b3480156106b757600080fd5b5061020c600480360360208110156106ce57600080fd5b50356001600160a01b031661190d565b3480156106ea57600080fd5b5061033f611a7a565b3480156106ff57600080fd5b5061033f611a89565b34801561071457600080fd5b5061020c600480360360e081101561072b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611a98565b34801561077257600080fd5b506103706004803603604081101561078957600080fd5b506001600160a01b0381358116916020013516611c9c565b3480156107ad57600080fd5b5061061a611cb9565b3480156107c257600080fd5b5061020c600480360360408110156107d957600080fd5b5080359060200135611cc3565b3480156107f257600080fd5b5061020c6004803603608081101561080957600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515611d2c565b34801561083d57600080fd5b5061020c611dde565b670de0b6b3a764000034101580156108605750600d5460ff165b61089d576040805162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b604482015290519081900360640190fd5b600e5447116108be57600d8054610100600160a81b03191633610100021790555b565b6040518060400160405280600c81526020016b253ab731b0b9bbb0b8102b1960a11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061091f338484611f42565b5060015b92915050565b6006546001600160a01b031681565b60005481565b600d5461010090046001600160a01b031681565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019146109d7576001600160a01b03841660009081526002602090815260408083203384529091529020546109b2908363ffffffff611fa416565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6109e2848484611ff4565b5060019392505050565b475b90565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b600c54600114610a62576040805162461bcd60e51b8152602060048201526013602482015272129d5b98d85cddd85c158c8e881313d0d2d151606a1b604482015290519081900360640190fd5b6000600c5584151580610a755750600084115b610ab05760405162461bcd60e51b815260040180806020018281038252602781526020018061288d6027913960400191505060405180910390fd5b600080610abb6108e8565b5091509150816001600160701b031687108015610ae05750806001600160701b031686105b610b1b5760405162461bcd60e51b81526004018080602001828103825260238152602001806129316023913960400191505060405180910390fd5b600d5460ff1615610c2e576f4a756e636173776170526f75746572326001600160a01b03891614610b7d5760405162461bcd60e51b81526004018080602001828103825260298152602001806129086029913960400191505060405180910390fd5b416001600160a01b03166108fc600560009054906101000a90046001600160a01b03166001600160a01b0316633fe43f406040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d6020811015610c0257600080fd5b50516040518115909202916000818181858888f19350505050158015610c2c573d6000803e3d6000fd5b505b60065460075460009182916001600160a01b03918216919081169089168214801590610c6c5750806001600160a01b0316896001600160a01b031614155b610cbd576040805162461bcd60e51b815260206004820152601760248201527f4a756e63617377617056323a20494e56414c49445f544f000000000000000000604482015290519081900360640190fd5b8a15610cce57610cce828a8d6120ae565b8915610cdf57610cdf818a8c6120ae565b8615610d9a57886001600160a01b031663a7de6e5b338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d6020811015610e0a57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610e5657600080fd5b505afa158015610e6a573d6000803e3d6000fd5b505050506040513d6020811015610e8057600080fd5b5051925060009150506001600160701b0385168a90038311610ea3576000610eb2565b89856001600160701b03160383035b9050600089856001600160701b0316038311610ecf576000610ede565b89856001600160701b03160383035b90506000821180610eef5750600081115b610f2a5760405162461bcd60e51b81526004018080602001828103825260268152602001806129546026913960400191505060405180910390fd5b600d5460ff168015610f3c5750600082115b15610f9757600f548211610f97576040805162461bcd60e51b815260206004820152601e60248201527f4a756e63617377617056323a494e5055545f414d4f554e545f4c494d49540000604482015290519081900360640190fd5b600d5460ff168015610fa95750600081115b15611004576010548111611004576040805162461bcd60e51b815260206004820152601e60248201527f4a756e63617377617056323a494e5055545f414d4f554e545f4c494d49540000604482015290519081900360640190fd5b600061103861101a84600363ffffffff61224816565b61102c876103e863ffffffff61224816565b9063ffffffff611fa416565b9050600061105061101a84600363ffffffff61224816565b9050611081620f42406110756001600160701b038b8116908b1663ffffffff61224816565b9063ffffffff61224816565b611091838363ffffffff61224816565b10156110d5576040805162461bcd60e51b815260206004820152600e60248201526d4a756e63617377617056323a204b60901b604482015290519081900360640190fd5b50506110e3848488886122ab565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c5550505050505050505050565b601281565b600e5481565b60035481565b600d5460009060ff16156111ea57600560009054906101000a90046001600160a01b03166001600160a01b0316633fe43f406040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d60208110156111e157600080fd5b505190506109ee565b50600090565b60095481565b600a5481565b6000600c5460011461124b576040805162461bcd60e51b8152602060048201526013602482015272129d5b98d85cddd85c158c8e881313d0d2d151606a1b604482015290519081900360640190fd5b6000600c8190558061125b6108e8565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d60208110156112d957600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d602081101561135657600080fd5b505190506000611375836001600160701b03871663ffffffff611fa416565b90506000611392836001600160701b03871663ffffffff611fa416565b905060006113a08787612472565b600054909150806113dd576113c96103e861102c6113c4878763ffffffff61224816565b612668565b98506113d860006103e86126ba565b61142c565b6114296001600160701b0389166113fa868463ffffffff61224816565b8161140157fe5b046001600160701b03891661141c868563ffffffff61224816565b8161142357fe5b04612750565b98505b6000891161146b5760405162461bcd60e51b815260040180806020018281038252602a8152602001806128de602a913960400191505060405180910390fd5b6114758a8a6126ba565b61148186868a8a6122ab565b81156114b1576008546114ad906001600160701b0380821691600160701b90041663ffffffff61224816565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114611578576040805162461bcd60e51b8152602060048201526013602482015272129d5b98d85cddd85c158c8e881313d0d2d151606a1b604482015290519081900360640190fd5b6000600c819055806115886108e8565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d602081101561160e57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561165c57600080fd5b505afa158015611670573d6000803e3d6000fd5b505050506040513d602081101561168657600080fd5b5051306000908152600160205260408120549192506116a58888612472565b600054909150806116bc848763ffffffff61224816565b816116c357fe5b049a50806116d7848663ffffffff61224816565b816116de57fe5b04995060008b1180156116f1575060008a115b61172c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806128b4602a913960400191505060405180910390fd5b6117363084612768565b611741878d8d6120ae565b61174c868d8c6120ae565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d60208110156117bc57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b5051935061184285858b8b6122ab565b81156118725760085461186e906001600160701b0380821691600160701b90041663ffffffff61224816565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b600d5460ff1681565b60405180604001604052806005815260200164252196ab1960d91b81525081565b600061091f338484611ff4565b6103e881565b600c5460011461195a576040805162461bcd60e51b8152602060048201526013602482015272129d5b98d85cddd85c158c8e881313d0d2d151606a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a099285928792611a04926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d60208110156119f657600080fd5b50519063ffffffff611fa416565b6120ae565b600854604080516370a0823160e01b81523060048201529051611a709284928792611a0492600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156119cc57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611ae4576040805162461bcd60e51b8152602060048201526014602482015273129d5b98d85cddd85c158c8e881156141254915160621b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611bff573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c355750886001600160a01b0316816001600160a01b0316145b611c86576040805162461bcd60e51b815260206004820152601e60248201527f4a756e63617377617056323a20494e56414c49445f5349474e41545552450000604482015290519081900360640190fd5b611c91898989611f42565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600f546010549091565b600d5461010090046001600160a01b031633148015611ce45750600d5460ff165b611d21576040805162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b604482015290519081900360640190fd5b600f91909155601055565b6005546001600160a01b03163314611d84576040805162461bcd60e51b8152602060048201526016602482015275253ab731b0b9bbb0b82b191d102327a92124a22222a760511b604482015290519081900360640190fd5b600680546001600160a01b03199081166001600160a01b03968716179091556007805490911693851693909317909255600d8054610100600160a81b03191661010092909416919091029290921760ff1916901515179055565b600c54600114611e2b576040805162461bcd60e51b8152602060048201526013602482015272129d5b98d85cddd85c158c8e881313d0d2d151606a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b81523060048201529051611f3b926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e7c57600080fd5b505afa158015611e90573d6000803e3d6000fd5b505050506040513d6020811015611ea657600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611ef357600080fd5b505afa158015611f07573d6000803e3d6000fd5b505050506040513d6020811015611f1d57600080fd5b50516008546001600160701b0380821691600160701b9004166122ab565b6001600c55565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80820382811115610923576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b03831660009081526001602052604090205461201d908263ffffffff611fa416565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612052908263ffffffff61280616565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061215b5780518252601f19909201916020918201910161213c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146121bd576040519150601f19603f3d011682016040523d82523d6000602084013e6121c2565b606091505b50915091508180156121f05750805115806121f057508080602001905160208110156121ed57600080fd5b50515b612241576040805162461bcd60e51b815260206004820152601c60248201527f4a756e63617377617056323a205452414e534645525f4641494c454400000000604482015290519081900360640190fd5b5050505050565b60008115806122635750508082028282828161226057fe5b04145b610923576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b6001600160701b0384118015906122c957506001600160701b038311155b612312576040805162461bcd60e51b81526020600482015260156024820152744a756e63617377617056323a204f564552464c4f5760581b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b9004811682039081161580159061234257506001600160701b03841615155b801561235657506001600160701b03831615155b156123c7578063ffffffff166123848561236f86612855565b6001600160e01b03169063ffffffff61286716565b600980546001600160e01b03929092169290920201905563ffffffff81166123af8461236f87612855565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c357600080fd5b505afa1580156124d7573d6000803e3d6000fd5b505050506040513d60208110156124ed57600080fd5b5051600b546001600160a01b03821615801594509192509061265457801561264f5760006125306113c46001600160701b0388811690881663ffffffff61224816565b9050600061253d83612668565b90508082111561264c5760006125706005611075612561868663ffffffff611fa416565b6000549063ffffffff61224816565b905060006125a561258884600563ffffffff61224816565b61259986601963ffffffff61224816565b9063ffffffff61280616565b905060008183816125b257fe5b04905080156125c5576125c587826126ba565b5050600d5460ff1615905061264c5760006125ee600a611075612561868663ffffffff611fa416565b9050600061261761260684600a63ffffffff61224816565b61259986601463ffffffff61224816565b9050600081838161262457fe5b049050801561264857600d546126489061010090046001600160a01b0316826126ba565b5050505b50505b612660565b8015612660576000600b555b505092915050565b600060038211156126ab575080600160028204015b818110156126a55780915060028182858161269457fe5b04018161269d57fe5b04905061267d565b506126b5565b81156126b5575060015b919050565b6000546126cd908263ffffffff61280616565b60009081556001600160a01b0383168152600160205260409020546126f8908263ffffffff61280616565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061275f5781612761565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612791908263ffffffff611fa416565b6001600160a01b038316600090815260016020526040812091909155546127be908263ffffffff611fa416565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80820182811015610923576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161288457fe5b04939250505056fe4a756e63617377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e544a756e63617377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e45444a756e63617377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e5445444a756e63617377617056323a206f6e6c792063616c6c6572204a756e636173776170526f75746572324a756e63617377617056323a20494e53554646494349454e545f4c49515549444954594a756e63617377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a7231582005763a54d05c30dba6cf1203545a4a23df44b94f827d163a0ab395614a554aed64736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a7231582058685689082488485d2ca722f00823fe453b533ff4bc87ef8d82d8bd784ca27164736f6c63430005100032",
}

// JuncaswapFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use JuncaswapFactoryMetaData.ABI instead.
var JuncaswapFactoryABI = JuncaswapFactoryMetaData.ABI

// JuncaswapFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use JuncaswapFactoryMetaData.Bin instead.
var JuncaswapFactoryBin = JuncaswapFactoryMetaData.Bin

// DeployJuncaswapFactory deploys a new Ethereum contract, binding an instance of JuncaswapFactory to it.
func DeployJuncaswapFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _feeToSetter common.Address) (common.Address, *types.Transaction, *JuncaswapFactory, error) {
	parsed, err := JuncaswapFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(JuncaswapFactoryBin), backend, _feeToSetter)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &JuncaswapFactory{JuncaswapFactoryCaller: JuncaswapFactoryCaller{contract: contract}, JuncaswapFactoryTransactor: JuncaswapFactoryTransactor{contract: contract}, JuncaswapFactoryFilterer: JuncaswapFactoryFilterer{contract: contract}}, nil
}

// JuncaswapFactory is an auto generated Go binding around an Ethereum contract.
type JuncaswapFactory struct {
	JuncaswapFactoryCaller     // Read-only binding to the contract
	JuncaswapFactoryTransactor // Write-only binding to the contract
	JuncaswapFactoryFilterer   // Log filterer for contract events
}

// JuncaswapFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type JuncaswapFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JuncaswapFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type JuncaswapFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JuncaswapFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type JuncaswapFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// JuncaswapFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type JuncaswapFactorySession struct {
	Contract     *JuncaswapFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// JuncaswapFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type JuncaswapFactoryCallerSession struct {
	Contract *JuncaswapFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// JuncaswapFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type JuncaswapFactoryTransactorSession struct {
	Contract     *JuncaswapFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// JuncaswapFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type JuncaswapFactoryRaw struct {
	Contract *JuncaswapFactory // Generic contract binding to access the raw methods on
}

// JuncaswapFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type JuncaswapFactoryCallerRaw struct {
	Contract *JuncaswapFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// JuncaswapFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type JuncaswapFactoryTransactorRaw struct {
	Contract *JuncaswapFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewJuncaswapFactory creates a new instance of JuncaswapFactory, bound to a specific deployed contract.
func NewJuncaswapFactory(address common.Address, backend bind.ContractBackend) (*JuncaswapFactory, error) {
	contract, err := bindJuncaswapFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactory{JuncaswapFactoryCaller: JuncaswapFactoryCaller{contract: contract}, JuncaswapFactoryTransactor: JuncaswapFactoryTransactor{contract: contract}, JuncaswapFactoryFilterer: JuncaswapFactoryFilterer{contract: contract}}, nil
}

// NewJuncaswapFactoryCaller creates a new read-only instance of JuncaswapFactory, bound to a specific deployed contract.
func NewJuncaswapFactoryCaller(address common.Address, caller bind.ContractCaller) (*JuncaswapFactoryCaller, error) {
	contract, err := bindJuncaswapFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactoryCaller{contract: contract}, nil
}

// NewJuncaswapFactoryTransactor creates a new write-only instance of JuncaswapFactory, bound to a specific deployed contract.
func NewJuncaswapFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*JuncaswapFactoryTransactor, error) {
	contract, err := bindJuncaswapFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactoryTransactor{contract: contract}, nil
}

// NewJuncaswapFactoryFilterer creates a new log filterer instance of JuncaswapFactory, bound to a specific deployed contract.
func NewJuncaswapFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*JuncaswapFactoryFilterer, error) {
	contract, err := bindJuncaswapFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactoryFilterer{contract: contract}, nil
}

// bindJuncaswapFactory binds a generic wrapper to an already deployed contract.
func bindJuncaswapFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(JuncaswapFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_JuncaswapFactory *JuncaswapFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _JuncaswapFactory.Contract.JuncaswapFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_JuncaswapFactory *JuncaswapFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.JuncaswapFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_JuncaswapFactory *JuncaswapFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.JuncaswapFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_JuncaswapFactory *JuncaswapFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _JuncaswapFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_JuncaswapFactory *JuncaswapFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_JuncaswapFactory *JuncaswapFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.contract.Transact(opts, method, params...)
}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCaller) AllPairs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "allPairs", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactorySession) AllPairs(arg0 *big.Int) (common.Address, error) {
	return _JuncaswapFactory.Contract.AllPairs(&_JuncaswapFactory.CallOpts, arg0)
}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) AllPairs(arg0 *big.Int) (common.Address, error) {
	return _JuncaswapFactory.Contract.AllPairs(&_JuncaswapFactory.CallOpts, arg0)
}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactoryCaller) AllPairsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "allPairsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactorySession) AllPairsLength() (*big.Int, error) {
	return _JuncaswapFactory.Contract.AllPairsLength(&_JuncaswapFactory.CallOpts)
}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) AllPairsLength() (*big.Int, error) {
	return _JuncaswapFactory.Contract.AllPairsLength(&_JuncaswapFactory.CallOpts)
}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCaller) FeeTo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "feeTo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_JuncaswapFactory *JuncaswapFactorySession) FeeTo() (common.Address, error) {
	return _JuncaswapFactory.Contract.FeeTo(&_JuncaswapFactory.CallOpts)
}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) FeeTo() (common.Address, error) {
	return _JuncaswapFactory.Contract.FeeTo(&_JuncaswapFactory.CallOpts)
}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCaller) FeeToSetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "feeToSetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_JuncaswapFactory *JuncaswapFactorySession) FeeToSetter() (common.Address, error) {
	return _JuncaswapFactory.Contract.FeeToSetter(&_JuncaswapFactory.CallOpts)
}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) FeeToSetter() (common.Address, error) {
	return _JuncaswapFactory.Contract.FeeToSetter(&_JuncaswapFactory.CallOpts)
}

// GasPerTx is a free data retrieval call binding the contract method 0x3fe43f40.
//
// Solidity: function gasPerTx() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactoryCaller) GasPerTx(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "gasPerTx")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasPerTx is a free data retrieval call binding the contract method 0x3fe43f40.
//
// Solidity: function gasPerTx() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactorySession) GasPerTx() (*big.Int, error) {
	return _JuncaswapFactory.Contract.GasPerTx(&_JuncaswapFactory.CallOpts)
}

// GasPerTx is a free data retrieval call binding the contract method 0x3fe43f40.
//
// Solidity: function gasPerTx() view returns(uint256)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) GasPerTx() (*big.Int, error) {
	return _JuncaswapFactory.Contract.GasPerTx(&_JuncaswapFactory.CallOpts)
}

// GetCodeHash is a free data retrieval call binding the contract method 0x83dd41c6.
//
// Solidity: function getCodeHash() pure returns(bytes32)
func (_JuncaswapFactory *JuncaswapFactoryCaller) GetCodeHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "getCodeHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCodeHash is a free data retrieval call binding the contract method 0x83dd41c6.
//
// Solidity: function getCodeHash() pure returns(bytes32)
func (_JuncaswapFactory *JuncaswapFactorySession) GetCodeHash() ([32]byte, error) {
	return _JuncaswapFactory.Contract.GetCodeHash(&_JuncaswapFactory.CallOpts)
}

// GetCodeHash is a free data retrieval call binding the contract method 0x83dd41c6.
//
// Solidity: function getCodeHash() pure returns(bytes32)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) GetCodeHash() ([32]byte, error) {
	return _JuncaswapFactory.Contract.GetCodeHash(&_JuncaswapFactory.CallOpts)
}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCaller) GetPair(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (common.Address, error) {
	var out []interface{}
	err := _JuncaswapFactory.contract.Call(opts, &out, "getPair", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactorySession) GetPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _JuncaswapFactory.Contract.GetPair(&_JuncaswapFactory.CallOpts, arg0, arg1)
}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_JuncaswapFactory *JuncaswapFactoryCallerSession) GetPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _JuncaswapFactory.Contract.GetPair(&_JuncaswapFactory.CallOpts, arg0, arg1)
}

// CreatePair is a paid mutator transaction binding the contract method 0x82dfdce4.
//
// Solidity: function createPair(address tokenA, address tokenB, bool _nogas) returns(address pair)
func (_JuncaswapFactory *JuncaswapFactoryTransactor) CreatePair(opts *bind.TransactOpts, tokenA common.Address, tokenB common.Address, _nogas bool) (*types.Transaction, error) {
	return _JuncaswapFactory.contract.Transact(opts, "createPair", tokenA, tokenB, _nogas)
}

// CreatePair is a paid mutator transaction binding the contract method 0x82dfdce4.
//
// Solidity: function createPair(address tokenA, address tokenB, bool _nogas) returns(address pair)
func (_JuncaswapFactory *JuncaswapFactorySession) CreatePair(tokenA common.Address, tokenB common.Address, _nogas bool) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.CreatePair(&_JuncaswapFactory.TransactOpts, tokenA, tokenB, _nogas)
}

// CreatePair is a paid mutator transaction binding the contract method 0x82dfdce4.
//
// Solidity: function createPair(address tokenA, address tokenB, bool _nogas) returns(address pair)
func (_JuncaswapFactory *JuncaswapFactoryTransactorSession) CreatePair(tokenA common.Address, tokenB common.Address, _nogas bool) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.CreatePair(&_JuncaswapFactory.TransactOpts, tokenA, tokenB, _nogas)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactor) SetFeeTo(opts *bind.TransactOpts, _feeTo common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.contract.Transact(opts, "setFeeTo", _feeTo)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_JuncaswapFactory *JuncaswapFactorySession) SetFeeTo(_feeTo common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetFeeTo(&_JuncaswapFactory.TransactOpts, _feeTo)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactorSession) SetFeeTo(_feeTo common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetFeeTo(&_JuncaswapFactory.TransactOpts, _feeTo)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactor) SetFeeToSetter(opts *bind.TransactOpts, _feeToSetter common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.contract.Transact(opts, "setFeeToSetter", _feeToSetter)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_JuncaswapFactory *JuncaswapFactorySession) SetFeeToSetter(_feeToSetter common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetFeeToSetter(&_JuncaswapFactory.TransactOpts, _feeToSetter)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactorSession) SetFeeToSetter(_feeToSetter common.Address) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetFeeToSetter(&_JuncaswapFactory.TransactOpts, _feeToSetter)
}

// SetGasPerTx is a paid mutator transaction binding the contract method 0x5d96feb1.
//
// Solidity: function setGasPerTx(uint256 _gasPerTx) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactor) SetGasPerTx(opts *bind.TransactOpts, _gasPerTx *big.Int) (*types.Transaction, error) {
	return _JuncaswapFactory.contract.Transact(opts, "setGasPerTx", _gasPerTx)
}

// SetGasPerTx is a paid mutator transaction binding the contract method 0x5d96feb1.
//
// Solidity: function setGasPerTx(uint256 _gasPerTx) returns()
func (_JuncaswapFactory *JuncaswapFactorySession) SetGasPerTx(_gasPerTx *big.Int) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetGasPerTx(&_JuncaswapFactory.TransactOpts, _gasPerTx)
}

// SetGasPerTx is a paid mutator transaction binding the contract method 0x5d96feb1.
//
// Solidity: function setGasPerTx(uint256 _gasPerTx) returns()
func (_JuncaswapFactory *JuncaswapFactoryTransactorSession) SetGasPerTx(_gasPerTx *big.Int) (*types.Transaction, error) {
	return _JuncaswapFactory.Contract.SetGasPerTx(&_JuncaswapFactory.TransactOpts, _gasPerTx)
}

// JuncaswapFactoryPairCreatedIterator is returned from FilterPairCreated and is used to iterate over the raw logs and unpacked data for PairCreated events raised by the JuncaswapFactory contract.
type JuncaswapFactoryPairCreatedIterator struct {
	Event *JuncaswapFactoryPairCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JuncaswapFactoryPairCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JuncaswapFactoryPairCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JuncaswapFactoryPairCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JuncaswapFactoryPairCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JuncaswapFactoryPairCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JuncaswapFactoryPairCreated represents a PairCreated event raised by the JuncaswapFactory contract.
type JuncaswapFactoryPairCreated struct {
	Token0 common.Address
	Token1 common.Address
	Pair   common.Address
	Arg3   *big.Int
	Arg4   bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPairCreated is a free log retrieval operation binding the contract event 0x30fcf386678f0a00ca73486610fda45a0bd09cb9ede7e2e5078f4c842f21b1da.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3, bool arg4)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) FilterPairCreated(opts *bind.FilterOpts, token0 []common.Address, token1 []common.Address) (*JuncaswapFactoryPairCreatedIterator, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _JuncaswapFactory.contract.FilterLogs(opts, "PairCreated", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactoryPairCreatedIterator{contract: _JuncaswapFactory.contract, event: "PairCreated", logs: logs, sub: sub}, nil
}

// WatchPairCreated is a free log subscription operation binding the contract event 0x30fcf386678f0a00ca73486610fda45a0bd09cb9ede7e2e5078f4c842f21b1da.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3, bool arg4)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) WatchPairCreated(opts *bind.WatchOpts, sink chan<- *JuncaswapFactoryPairCreated, token0 []common.Address, token1 []common.Address) (event.Subscription, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _JuncaswapFactory.contract.WatchLogs(opts, "PairCreated", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JuncaswapFactoryPairCreated)
				if err := _JuncaswapFactory.contract.UnpackLog(event, "PairCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePairCreated is a log parse operation binding the contract event 0x30fcf386678f0a00ca73486610fda45a0bd09cb9ede7e2e5078f4c842f21b1da.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3, bool arg4)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) ParsePairCreated(log types.Log) (*JuncaswapFactoryPairCreated, error) {
	event := new(JuncaswapFactoryPairCreated)
	if err := _JuncaswapFactory.contract.UnpackLog(event, "PairCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// JuncaswapFactoryPairCreated0Iterator is returned from FilterPairCreated0 and is used to iterate over the raw logs and unpacked data for PairCreated0 events raised by the JuncaswapFactory contract.
type JuncaswapFactoryPairCreated0Iterator struct {
	Event *JuncaswapFactoryPairCreated0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *JuncaswapFactoryPairCreated0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(JuncaswapFactoryPairCreated0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(JuncaswapFactoryPairCreated0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *JuncaswapFactoryPairCreated0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *JuncaswapFactoryPairCreated0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// JuncaswapFactoryPairCreated0 represents a PairCreated0 event raised by the JuncaswapFactory contract.
type JuncaswapFactoryPairCreated0 struct {
	Token0 common.Address
	Token1 common.Address
	Pair   common.Address
	Arg3   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPairCreated0 is a free log retrieval operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) FilterPairCreated0(opts *bind.FilterOpts, token0 []common.Address, token1 []common.Address) (*JuncaswapFactoryPairCreated0Iterator, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _JuncaswapFactory.contract.FilterLogs(opts, "PairCreated0", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return &JuncaswapFactoryPairCreated0Iterator{contract: _JuncaswapFactory.contract, event: "PairCreated0", logs: logs, sub: sub}, nil
}

// WatchPairCreated0 is a free log subscription operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) WatchPairCreated0(opts *bind.WatchOpts, sink chan<- *JuncaswapFactoryPairCreated0, token0 []common.Address, token1 []common.Address) (event.Subscription, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _JuncaswapFactory.contract.WatchLogs(opts, "PairCreated0", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(JuncaswapFactoryPairCreated0)
				if err := _JuncaswapFactory.contract.UnpackLog(event, "PairCreated0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePairCreated0 is a log parse operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_JuncaswapFactory *JuncaswapFactoryFilterer) ParsePairCreated0(log types.Log) (*JuncaswapFactoryPairCreated0, error) {
	event := new(JuncaswapFactoryPairCreated0)
	if err := _JuncaswapFactory.contract.UnpackLog(event, "PairCreated0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
